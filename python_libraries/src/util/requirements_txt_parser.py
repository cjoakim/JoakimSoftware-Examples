# Classes for parsing requirements.txt files as produced by the
# pip-compile program.  Can be used for dependency graph analysis.
# Chris Joakim, 2025

from src.io.fs import FS


class Requirement:

    def __init__(self, using_lib: str, dependency_lib: str):
        self.using_lib = using_lib
        self.dependency_lib = dependency_lib


class Library:

    def __init__(self, name: str):
        self.name = name
        self.dependencies = dict()

    def add_dependency(self, lib):
        if lib is not None:
            self.dependencies[lib] = lib

    def traverse_graph(self):
        pass  # TODO


class Libraries:

    def __init__(self):
        self.libs = dict()

    def add_library(self, lib: Library):
        if lib is not None:
            self.libs[lib.name] = lib

    def traverse_graph(self):
        pass  # TODO


class RequirementsTxtParser:

    def __init__(self):
        self.data = {}

    def parse(self, infile: str) -> list:
        pass  # TODO


class SampleRequirements:

    @classmethod
    def project_sample(cls):
        return """
#
# This file is autogenerated by pip-compile with Python 3.12
# by the following command:
#
#    pip-compile boto3.in
#
boto3==1.38.9
    # via -r boto3.in
botocore==1.38.9
    # via
    #   boto3
    #   s3transfer
jmespath==1.0.1
    # via
    #   boto3
    #   botocore
python-dateutil==2.9.0.post0
    # via botocore
s3transfer==0.12.0
    # via boto3
six==1.17.0
    # via python-dateutil
urllib3==2.4.0
    # via botocore
""".strip()
    